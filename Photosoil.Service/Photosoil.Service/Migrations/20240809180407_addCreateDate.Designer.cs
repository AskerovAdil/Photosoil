// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Photosoil.Service.Data;

#nullable disable

namespace Photosoil.Service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809180407_addCreateDate")]
    partial class addCreateDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorEcoSystem", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("EcoSystemsId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "EcoSystemsId");

                    b.HasIndex("EcoSystemsId");

                    b.ToTable("AuthorEcoSystem");
                });

            modelBuilder.Entity("AuthorSoilObject", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilObjectsId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "SoilObjectsId");

                    b.HasIndex("SoilObjectsId");

                    b.ToTable("AuthorSoilObject");
                });

            modelBuilder.Entity("EcoSystemFile", b =>
                {
                    b.Property<int>("EcoSystemsId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectPhotoId")
                        .HasColumnType("integer");

                    b.HasKey("EcoSystemsId", "ObjectPhotoId");

                    b.HasIndex("ObjectPhotoId");

                    b.ToTable("EcoSystemFile");
                });

            modelBuilder.Entity("EcoSystemPublication", b =>
                {
                    b.Property<int>("EcoSystemsId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsId")
                        .HasColumnType("integer");

                    b.HasKey("EcoSystemsId", "PublicationsId");

                    b.HasIndex("PublicationsId");

                    b.ToTable("EcoSystemPublication");
                });

            modelBuilder.Entity("EcoSystemSoilObject", b =>
                {
                    b.Property<int>("EcoSystemsId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilObjectsId")
                        .HasColumnType("integer");

                    b.HasKey("EcoSystemsId", "SoilObjectsId");

                    b.HasIndex("SoilObjectsId");

                    b.ToTable("EcoSystemSoilObject");
                });

            modelBuilder.Entity("FileNews", b =>
                {
                    b.Property<int>("FilesId")
                        .HasColumnType("integer");

                    b.Property<int>("NewsFilesId")
                        .HasColumnType("integer");

                    b.HasKey("FilesId", "NewsFilesId");

                    b.HasIndex("NewsFilesId");

                    b.ToTable("FileNews");
                });

            modelBuilder.Entity("FileNews1", b =>
                {
                    b.Property<int>("NewsPhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectPhotoId")
                        .HasColumnType("integer");

                    b.HasKey("NewsPhotoId", "ObjectPhotoId");

                    b.HasIndex("ObjectPhotoId");

                    b.ToTable("FileNews1");
                });

            modelBuilder.Entity("FileSoilObject", b =>
                {
                    b.Property<int>("ObjectPhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilObjectsId")
                        .HasColumnType("integer");

                    b.HasKey("ObjectPhotoId", "SoilObjectsId");

                    b.HasIndex("SoilObjectsId");

                    b.ToTable("FileSoilObject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewsTag", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("NewsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("NewsTag");
                });

            modelBuilder.Entity("Photosoil.Core.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Photosoil.Core.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorType")
                        .HasColumnType("integer");

                    b.Property<string>("Contacts")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<int>("DataEngId")
                        .HasColumnType("integer");

                    b.Property<int>("DataRuId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherProfiles")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataEngId");

                    b.HasIndex("DataRuId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Photosoil.Core.Models.EcoSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longtitude")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("EcoSystem");
                });

            modelBuilder.Entity("Photosoil.Core.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleEng")
                        .HasColumnType("text");

                    b.Property<string>("TitleRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Photosoil.Core.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Annotation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("Publication");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMulti")
                        .HasColumnType("boolean");

                    b.Property<string>("NameEng")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.Property<int>("TranslationMode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Classification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMulti = true,
                            NameRu = "Отделы почв по Классификации почв России 2004/2008",
                            TranslationMode = 2
                        },
                        new
                        {
                            Id = 4,
                            IsMulti = true,
                            NameEng = "Natural zone",
                            NameRu = "Природная зона",
                            TranslationMode = 0
                        },
                        new
                        {
                            Id = 2,
                            IsMulti = true,
                            NameRu = "Подтипы почв по Классификации почв России 2004/2008",
                            TranslationMode = 2
                        },
                        new
                        {
                            Id = 3,
                            IsMulti = true,
                            NameRu = "Типы почв по Классификации почв России 2004/2008",
                            TranslationMode = 2
                        },
                        new
                        {
                            Id = 5,
                            IsMulti = true,
                            NameEng = "Principal qualifiers (WRB 2014)",
                            NameRu = "Основные квалификаторы (WRB 2014)",
                            TranslationMode = 0
                        },
                        new
                        {
                            Id = 6,
                            IsMulti = true,
                            NameEng = "Principal qualifiers (WRB 2014)",
                            NameRu = "Основные квалификаторы (WRB 2014)",
                            TranslationMode = 0
                        });
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.EcoTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EcoSystemId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcoSystemId");

                    b.ToTable("EcoTranslations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.NewsTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<bool?>("IsEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<int?>("NewsId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsTranslations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.PublicationTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Authors")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<bool?>("IsEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationTranslations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.SoilTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedSoilComponents")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("GeographicLocation")
                        .HasColumnType("text");

                    b.Property<bool?>("IsEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdated")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlantCommunity")
                        .HasColumnType("text");

                    b.Property<string>("ReliefLocation")
                        .HasColumnType("text");

                    b.Property<string>("SoilFeatures")
                        .HasColumnType("text");

                    b.Property<int?>("SoilId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SoilId");

                    b.ToTable("SoilTranslations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEng")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.ToTable("Term");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassificationId = 5,
                            NameEng = "Abruptic",
                            NameRu = "Abruptic"
                        },
                        new
                        {
                            Id = 2,
                            ClassificationId = 5,
                            NameEng = "Calcaric",
                            NameRu = "Calcaric"
                        },
                        new
                        {
                            Id = 3,
                            ClassificationId = 5,
                            NameEng = "Cambic",
                            NameRu = "Cambic"
                        },
                        new
                        {
                            Id = 4,
                            ClassificationId = 5,
                            NameEng = "Chromic",
                            NameRu = "Chromic"
                        },
                        new
                        {
                            Id = 5,
                            ClassificationId = 5,
                            NameEng = "Cutanic",
                            NameRu = "Cutanic"
                        },
                        new
                        {
                            Id = 6,
                            ClassificationId = 5,
                            NameEng = "Greyic",
                            NameRu = "Greyic"
                        },
                        new
                        {
                            Id = 7,
                            ClassificationId = 5,
                            NameEng = "Greyzemic",
                            NameRu = "Greyzemic"
                        },
                        new
                        {
                            Id = 8,
                            ClassificationId = 5,
                            NameEng = "Orthofluvic",
                            NameRu = "Orthofluvic"
                        },
                        new
                        {
                            Id = 9,
                            ClassificationId = 5,
                            NameEng = "Protoargic",
                            NameRu = "Protoargic"
                        },
                        new
                        {
                            Id = 10,
                            ClassificationId = 5,
                            NameEng = "Reductigleyic",
                            NameRu = "Reductigleyic"
                        },
                        new
                        {
                            Id = 11,
                            ClassificationId = 5,
                            NameEng = "Rustic",
                            NameRu = "Rustic"
                        },
                        new
                        {
                            Id = 12,
                            ClassificationId = 5,
                            NameEng = "Someric",
                            NameRu = "Someric"
                        },
                        new
                        {
                            Id = 13,
                            ClassificationId = 5,
                            NameEng = "Spolic",
                            NameRu = "Spolic"
                        },
                        new
                        {
                            Id = 14,
                            ClassificationId = 5,
                            NameEng = "Sapric",
                            NameRu = "Sapric"
                        },
                        new
                        {
                            Id = 15,
                            ClassificationId = 5,
                            NameEng = "Spodic",
                            NameRu = "Spodic"
                        },
                        new
                        {
                            Id = 16,
                            ClassificationId = 5,
                            NameEng = "Stagnic",
                            NameRu = "Stagnic"
                        },
                        new
                        {
                            Id = 17,
                            ClassificationId = 5,
                            NameEng = "Ortsteinic",
                            NameRu = "Ortsteinic"
                        },
                        new
                        {
                            Id = 18,
                            ClassificationId = 5,
                            NameEng = "Natric",
                            NameRu = "Natric"
                        },
                        new
                        {
                            Id = 19,
                            ClassificationId = 5,
                            NameEng = "Leptic",
                            NameRu = "Leptic"
                        },
                        new
                        {
                            Id = 20,
                            ClassificationId = 5,
                            NameEng = "Limnic",
                            NameRu = "Limnic"
                        },
                        new
                        {
                            Id = 21,
                            ClassificationId = 5,
                            NameEng = "Luvic",
                            NameRu = "Luvic"
                        },
                        new
                        {
                            Id = 22,
                            ClassificationId = 5,
                            NameEng = "Mollic",
                            NameRu = "Mollic"
                        },
                        new
                        {
                            Id = 23,
                            ClassificationId = 5,
                            NameEng = "Turbic",
                            NameRu = "Turbic"
                        },
                        new
                        {
                            Id = 24,
                            ClassificationId = 5,
                            NameEng = "Umbric",
                            NameRu = "Umbric"
                        },
                        new
                        {
                            Id = 25,
                            ClassificationId = 5,
                            NameEng = "Vertic",
                            NameRu = "Vertic"
                        },
                        new
                        {
                            Id = 26,
                            ClassificationId = 5,
                            NameEng = "Vitric",
                            NameRu = "Vitric"
                        },
                        new
                        {
                            Id = 27,
                            ClassificationId = 5,
                            NameEng = "Lamellic",
                            NameRu = "Lamellic"
                        },
                        new
                        {
                            Id = 28,
                            ClassificationId = 5,
                            NameEng = "Histic",
                            NameRu = "Histic"
                        },
                        new
                        {
                            Id = 29,
                            ClassificationId = 5,
                            NameEng = "Chernic",
                            NameRu = "Chernic"
                        },
                        new
                        {
                            Id = 30,
                            ClassificationId = 5,
                            NameEng = "Cryic",
                            NameRu = "Cryic"
                        },
                        new
                        {
                            Id = 31,
                            ClassificationId = 5,
                            NameEng = "Dystric",
                            NameRu = "Dystric"
                        },
                        new
                        {
                            Id = 32,
                            ClassificationId = 5,
                            NameEng = "Endocalcic",
                            NameRu = "Endocalcic"
                        },
                        new
                        {
                            Id = 33,
                            ClassificationId = 5,
                            NameEng = "Carbic",
                            NameRu = "Carbic"
                        },
                        new
                        {
                            Id = 34,
                            ClassificationId = 5,
                            NameEng = "Calcic",
                            NameRu = "Calcic"
                        },
                        new
                        {
                            Id = 35,
                            ClassificationId = 5,
                            NameEng = "Alic",
                            NameRu = "Alic"
                        },
                        new
                        {
                            Id = 36,
                            ClassificationId = 5,
                            NameEng = "Andic",
                            NameRu = "Andic"
                        },
                        new
                        {
                            Id = 37,
                            ClassificationId = 5,
                            NameEng = "Brunic",
                            NameRu = "Brunic"
                        },
                        new
                        {
                            Id = 38,
                            ClassificationId = 5,
                            NameEng = "Entic",
                            NameRu = "Entic"
                        },
                        new
                        {
                            Id = 39,
                            ClassificationId = 5,
                            NameEng = "Eutric",
                            NameRu = "Eutric"
                        },
                        new
                        {
                            Id = 40,
                            ClassificationId = 5,
                            NameEng = "Gleyic",
                            NameRu = "Gleyic"
                        },
                        new
                        {
                            Id = 41,
                            ClassificationId = 5,
                            NameEng = "Glossic",
                            NameRu = "Glossic"
                        },
                        new
                        {
                            Id = 42,
                            ClassificationId = 5,
                            NameEng = "Gypsic",
                            NameRu = "Gypsic"
                        },
                        new
                        {
                            Id = 43,
                            ClassificationId = 5,
                            NameEng = "Hemic",
                            NameRu = "Hemic"
                        },
                        new
                        {
                            Id = 44,
                            ClassificationId = 5,
                            NameEng = "Glacic",
                            NameRu = "Glacic"
                        },
                        new
                        {
                            Id = 45,
                            ClassificationId = 5,
                            NameEng = "Fragic",
                            NameRu = "Fragic"
                        },
                        new
                        {
                            Id = 46,
                            ClassificationId = 5,
                            NameEng = "Fibric",
                            NameRu = "Fibric"
                        },
                        new
                        {
                            Id = 47,
                            ClassificationId = 5,
                            NameEng = "Fluvic",
                            NameRu = "Fluvic"
                        },
                        new
                        {
                            Id = 48,
                            ClassificationId = 5,
                            NameEng = "Folic",
                            NameRu = "Folic"
                        },
                        new
                        {
                            Id = 49,
                            ClassificationId = 5,
                            NameEng = "Albic",
                            NameRu = "Albic"
                        },
                        new
                        {
                            Id = 50,
                            ClassificationId = 6,
                            NameEng = "Acrisols",
                            NameRu = "Acrisols"
                        },
                        new
                        {
                            Id = 51,
                            ClassificationId = 6,
                            NameEng = "Alisols",
                            NameRu = "Alisols"
                        },
                        new
                        {
                            Id = 52,
                            ClassificationId = 6,
                            NameEng = "Andosols",
                            NameRu = "Andosols"
                        },
                        new
                        {
                            Id = 53,
                            ClassificationId = 6,
                            NameEng = "Anthrosols",
                            NameRu = "Anthrosols"
                        },
                        new
                        {
                            Id = 54,
                            ClassificationId = 6,
                            NameEng = "Arenosols",
                            NameRu = "Arenosols"
                        },
                        new
                        {
                            Id = 55,
                            ClassificationId = 6,
                            NameEng = "Calcisols",
                            NameRu = "Calcisols"
                        },
                        new
                        {
                            Id = 56,
                            ClassificationId = 6,
                            NameEng = "Cambisols",
                            NameRu = "Cambisols"
                        },
                        new
                        {
                            Id = 57,
                            ClassificationId = 6,
                            NameEng = "Chernozems",
                            NameRu = "Chernozems"
                        },
                        new
                        {
                            Id = 58,
                            ClassificationId = 6,
                            NameEng = "Cryosols",
                            NameRu = "Cryosols"
                        },
                        new
                        {
                            Id = 59,
                            ClassificationId = 6,
                            NameEng = "Durisols",
                            NameRu = "Durisols"
                        },
                        new
                        {
                            Id = 60,
                            ClassificationId = 6,
                            NameEng = "Ferralsols",
                            NameRu = "Ferralsols"
                        },
                        new
                        {
                            Id = 61,
                            ClassificationId = 6,
                            NameEng = "Fluvisols",
                            NameRu = "Fluvisols"
                        },
                        new
                        {
                            Id = 62,
                            ClassificationId = 6,
                            NameEng = "Gleysols",
                            NameRu = "Gleysols"
                        },
                        new
                        {
                            Id = 63,
                            ClassificationId = 6,
                            NameEng = "Gypsisols",
                            NameRu = "Gypsisols"
                        },
                        new
                        {
                            Id = 64,
                            ClassificationId = 6,
                            NameEng = "Histosols",
                            NameRu = "Histosols"
                        },
                        new
                        {
                            Id = 65,
                            ClassificationId = 6,
                            NameEng = "Kastanozems",
                            NameRu = "Kastanozems"
                        },
                        new
                        {
                            Id = 66,
                            ClassificationId = 6,
                            NameEng = "Leptosols",
                            NameRu = "Leptosols"
                        },
                        new
                        {
                            Id = 67,
                            ClassificationId = 6,
                            NameEng = "Lixisols",
                            NameRu = "Lixisols"
                        },
                        new
                        {
                            Id = 68,
                            ClassificationId = 6,
                            NameEng = "Luvisols",
                            NameRu = "Luvisols"
                        },
                        new
                        {
                            Id = 69,
                            ClassificationId = 6,
                            NameEng = "Nitisols",
                            NameRu = "Nitisols"
                        },
                        new
                        {
                            Id = 70,
                            ClassificationId = 6,
                            NameEng = "Phaeozems",
                            NameRu = "Phaeozems"
                        },
                        new
                        {
                            Id = 71,
                            ClassificationId = 6,
                            NameEng = "Planosols",
                            NameRu = "Planosols"
                        },
                        new
                        {
                            Id = 72,
                            ClassificationId = 6,
                            NameEng = "Plinthosols",
                            NameRu = "Plinthosols"
                        },
                        new
                        {
                            Id = 73,
                            ClassificationId = 6,
                            NameEng = "Podzols",
                            NameRu = "Podzols"
                        },
                        new
                        {
                            Id = 74,
                            ClassificationId = 6,
                            NameEng = "Regosols",
                            NameRu = "Regosols"
                        },
                        new
                        {
                            Id = 75,
                            ClassificationId = 6,
                            NameEng = "Retisols",
                            NameRu = "Retisols"
                        },
                        new
                        {
                            Id = 76,
                            ClassificationId = 6,
                            NameEng = "Solonchaks",
                            NameRu = "Solonchaks"
                        },
                        new
                        {
                            Id = 77,
                            ClassificationId = 6,
                            NameEng = "Solonetz",
                            NameRu = "Solonetz"
                        },
                        new
                        {
                            Id = 78,
                            ClassificationId = 6,
                            NameEng = "Stagnosols",
                            NameRu = "Stagnosols"
                        },
                        new
                        {
                            Id = 79,
                            ClassificationId = 6,
                            NameEng = "Technosols",
                            NameRu = "Technosols"
                        },
                        new
                        {
                            Id = 80,
                            ClassificationId = 6,
                            NameEng = "Umbrisols",
                            NameRu = "Umbrisols"
                        },
                        new
                        {
                            Id = 81,
                            ClassificationId = 6,
                            NameEng = "Vertisols",
                            NameRu = "Vertisols"
                        },
                        new
                        {
                            Id = 82,
                            ClassificationId = 3,
                            NameRu = "Абразёмы глинисто-иллювиированные"
                        },
                        new
                        {
                            Id = 83,
                            ClassificationId = 3,
                            NameRu = "Агроабразёмы"
                        },
                        new
                        {
                            Id = 84,
                            ClassificationId = 3,
                            NameRu = "Агродерново-подзолисто-глеевые"
                        },
                        new
                        {
                            Id = 85,
                            ClassificationId = 3,
                            NameRu = "Агродерново-подзолистые"
                        },
                        new
                        {
                            Id = 86,
                            ClassificationId = 3,
                            NameRu = "Агрозёмы"
                        },
                        new
                        {
                            Id = 87,
                            ClassificationId = 3,
                            NameRu = "Агроземы текстурно-карбонатные"
                        },
                        new
                        {
                            Id = 88,
                            ClassificationId = 3,
                            NameRu = "Агросолоди"
                        },
                        new
                        {
                            Id = 89,
                            ClassificationId = 3,
                            NameRu = "Агростратозем"
                        },
                        new
                        {
                            Id = 90,
                            ClassificationId = 3,
                            NameRu = "Агростратозёмы темногумусовые"
                        },
                        new
                        {
                            Id = 91,
                            ClassificationId = 3,
                            NameRu = "Агротёмно-серые"
                        },
                        new
                        {
                            Id = 92,
                            ClassificationId = 3,
                            NameRu = "Агротёмно-серые глеевые"
                        },
                        new
                        {
                            Id = 93,
                            ClassificationId = 3,
                            NameRu = "Агротёмно-серые метаморфические"
                        },
                        new
                        {
                            Id = 94,
                            ClassificationId = 3,
                            NameRu = "Агрочернозем текстурно-карбонатный"
                        },
                        new
                        {
                            Id = 95,
                            ClassificationId = 3,
                            NameRu = "Агрочерноземы"
                        },
                        new
                        {
                            Id = 96,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные"
                        },
                        new
                        {
                            Id = 97,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные гумусовые (дерновые)"
                        },
                        new
                        {
                            Id = 98,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные гумусовые глеевые"
                        },
                        new
                        {
                            Id = 99,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные перегнойно-глеевые"
                        },
                        new
                        {
                            Id = 100,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные тёмногумусовые"
                        },
                        new
                        {
                            Id = 101,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные тёмногумусовые глеевые"
                        },
                        new
                        {
                            Id = 102,
                            ClassificationId = 3,
                            NameRu = "Аллювиальные торфянно-глеевые"
                        },
                        new
                        {
                            Id = 103,
                            ClassificationId = 3,
                            NameRu = "Бурая (аридная)"
                        },
                        new
                        {
                            Id = 104,
                            ClassificationId = 3,
                            NameRu = "Бурозёмы"
                        },
                        new
                        {
                            Id = 105,
                            ClassificationId = 3,
                            NameRu = "Бурозёмы грубогумусовые"
                        },
                        new
                        {
                            Id = 106,
                            ClassificationId = 3,
                            NameRu = "Бурозёмы тёмногумусовые"
                        },
                        new
                        {
                            Id = 107,
                            ClassificationId = 3,
                            NameRu = "Глеезёмы"
                        },
                        new
                        {
                            Id = 108,
                            ClassificationId = 3,
                            NameRu = "Глееземы криометаморфические"
                        },
                        new
                        {
                            Id = 109,
                            ClassificationId = 3,
                            NameRu = "Гумусово-гидрометаморфические"
                        },
                        new
                        {
                            Id = 110,
                            ClassificationId = 3,
                            NameRu = "Дерново подзолы"
                        },
                        new
                        {
                            Id = 111,
                            ClassificationId = 3,
                            NameRu = "Дерново-брусно-подзолистые"
                        },
                        new
                        {
                            Id = 112,
                            ClassificationId = 3,
                            NameRu = "Дерново-криометаморфические"
                        },
                        new
                        {
                            Id = 113,
                            ClassificationId = 3,
                            NameRu = "Дерново-подбуры"
                        },
                        new
                        {
                            Id = 114,
                            ClassificationId = 3,
                            NameRu = "Дерново-подбуры глеевые"
                        },
                        new
                        {
                            Id = 115,
                            ClassificationId = 3,
                            NameRu = "Дерново-подбуры элювоземы"
                        },
                        new
                        {
                            Id = 116,
                            ClassificationId = 3,
                            NameRu = "Дерново-подзол-глеевые"
                        },
                        new
                        {
                            Id = 117,
                            ClassificationId = 3,
                            NameRu = "Дерново-подзолистые"
                        },
                        new
                        {
                            Id = 118,
                            ClassificationId = 3,
                            NameRu = "Дерново-подзолы глеевые"
                        },
                        new
                        {
                            Id = 119,
                            ClassificationId = 3,
                            NameRu = "Дерново-солоди"
                        },
                        new
                        {
                            Id = 120,
                            ClassificationId = 3,
                            NameRu = "Дерново-элювиально-метаморфические"
                        },
                        new
                        {
                            Id = 121,
                            ClassificationId = 3,
                            NameRu = "Дерново-элювозем"
                        },
                        new
                        {
                            Id = 122,
                            ClassificationId = 3,
                            NameRu = "Карбо-петрозём"
                        },
                        new
                        {
                            Id = 123,
                            ClassificationId = 3,
                            NameRu = "Каштановые"
                        },
                        new
                        {
                            Id = 124,
                            ClassificationId = 3,
                            NameRu = "Криогумусовые"
                        },
                        new
                        {
                            Id = 125,
                            ClassificationId = 3,
                            NameRu = "Криозёмы"
                        },
                        new
                        {
                            Id = 126,
                            ClassificationId = 3,
                            NameRu = "Криозёмы грубогумусовые"
                        },
                        new
                        {
                            Id = 127,
                            ClassificationId = 3,
                            NameRu = "Криометаморфические"
                        },
                        new
                        {
                            Id = 128,
                            ClassificationId = 3,
                            NameRu = "Криометаморфические грубогумусовые"
                        },
                        new
                        {
                            Id = 129,
                            ClassificationId = 3,
                            NameRu = "Литозем грубогумусовый"
                        },
                        new
                        {
                            Id = 130,
                            ClassificationId = 3,
                            NameRu = "Органо-ржавозёмы"
                        },
                        new
                        {
                            Id = 131,
                            ClassificationId = 3,
                            NameRu = "Охристые"
                        },
                        new
                        {
                            Id = 132,
                            ClassificationId = 3,
                            NameRu = "Палевые"
                        },
                        new
                        {
                            Id = 133,
                            ClassificationId = 3,
                            NameRu = "Пелозем"
                        },
                        new
                        {
                            Id = 134,
                            ClassificationId = 3,
                            NameRu = "Пелоземы гумусовые"
                        },
                        new
                        {
                            Id = 135,
                            ClassificationId = 3,
                            NameRu = "Перегнойно-глеевые"
                        },
                        new
                        {
                            Id = 136,
                            ClassificationId = 3,
                            NameRu = "Перегnoonно-криометаморфические"
                        },
                        new
                        {
                            Id = 137,
                            ClassificationId = 3,
                            NameRu = "Перегнойно-охристая"
                        },
                        new
                        {
                            Id = 138,
                            ClassificationId = 3,
                            NameRu = "Перегнойно-темногумусовые"
                        },
                        new
                        {
                            Id = 139,
                            ClassificationId = 3,
                            NameRu = "Перегнойные"
                        },
                        new
                        {
                            Id = 140,
                            ClassificationId = 3,
                            NameRu = "Петроземы"
                        },
                        new
                        {
                            Id = 141,
                            ClassificationId = 3,
                            NameRu = "Подбуры"
                        },
                        new
                        {
                            Id = 142,
                            ClassificationId = 3,
                            NameRu = "Подбуры глеевые"
                        },
                        new
                        {
                            Id = 143,
                            ClassificationId = 3,
                            NameRu = "Подзол-элювозёмы"
                        },
                        new
                        {
                            Id = 144,
                            ClassificationId = 3,
                            NameRu = "Подзолисто-глеевые"
                        },
                        new
                        {
                            Id = 145,
                            ClassificationId = 3,
                            NameRu = "Подзолистые"
                        },
                        new
                        {
                            Id = 146,
                            ClassificationId = 3,
                            NameRu = "Подзолы"
                        },
                        new
                        {
                            Id = 147,
                            ClassificationId = 3,
                            NameRu = "Подзолы глеевые"
                        },
                        new
                        {
                            Id = 148,
                            ClassificationId = 3,
                            NameRu = "Псаммоземы"
                        },
                        new
                        {
                            Id = 149,
                            ClassificationId = 3,
                            NameRu = "Ржавозёмы"
                        },
                        new
                        {
                            Id = 150,
                            ClassificationId = 3,
                            NameRu = "Ржавозёмы грубогумусовые"
                        },
                        new
                        {
                            Id = 151,
                            ClassificationId = 3,
                            NameRu = "Светлогумусовые"
                        },
                        new
                        {
                            Id = 152,
                            ClassificationId = 3,
                            NameRu = "Серая метаморфическая"
                        },
                        new
                        {
                            Id = 153,
                            ClassificationId = 3,
                            NameRu = "Серогумусовые (дерновые)"
                        },
                        new
                        {
                            Id = 154,
                            ClassificationId = 3,
                            NameRu = "Серые"
                        },
                        new
                        {
                            Id = 155,
                            ClassificationId = 3,
                            NameRu = "Слоисто-пепловые"
                        },
                        new
                        {
                            Id = 156,
                            ClassificationId = 3,
                            NameRu = "Солоди темногумусовые"
                        },
                        new
                        {
                            Id = 157,
                            ClassificationId = 3,
                            NameRu = "Солонцы светлые"
                        },
                        new
                        {
                            Id = 158,
                            ClassificationId = 3,
                            NameRu = "Солонцы темные"
                        },
                        new
                        {
                            Id = 159,
                            ClassificationId = 3,
                            NameRu = "Солончаки"
                        },
                        new
                        {
                            Id = 160,
                            ClassificationId = 3,
                            NameRu = "Солончаки глеевые"
                        },
                        new
                        {
                            Id = 161,
                            ClassificationId = 3,
                            NameRu = "Стратозёмы серогумусовые"
                        },
                        new
                        {
                            Id = 162,
                            ClassificationId = 3,
                            NameRu = "Сухо-торфяные"
                        },
                        new
                        {
                            Id = 163,
                            ClassificationId = 3,
                            NameRu = "Сухоторфяно-подбуры"
                        },
                        new
                        {
                            Id = 164,
                            ClassificationId = 3,
                            NameRu = "Сухоторфяно-подзолы"
                        },
                        new
                        {
                            Id = 165,
                            ClassificationId = 3,
                            NameRu = "Сухоторфяные"
                        },
                        new
                        {
                            Id = 166,
                            ClassificationId = 3,
                            NameRu = "Темно-серые"
                        },
                        new
                        {
                            Id = 167,
                            ClassificationId = 3,
                            NameRu = "Темно-серые глеевые"
                        },
                        new
                        {
                            Id = 168,
                            ClassificationId = 3,
                            NameRu = "Темно-serые метаморфические"
                        },
                        new
                        {
                            Id = 169,
                            ClassificationId = 3,
                            NameRu = "Темногумусово-глеевые"
                        },
                        new
                        {
                            Id = 170,
                            ClassificationId = 3,
                            NameRu = "Темногумусовые"
                        },
                        new
                        {
                            Id = 171,
                            ClassificationId = 3,
                            NameRu = "Темногумусовые подбелы"
                        },
                        new
                        {
                            Id = 172,
                            ClassificationId = 3,
                            NameRu = "Торфозёмы"
                        },
                        new
                        {
                            Id = 173,
                            ClassificationId = 3,
                            NameRu = "Торфяно-глеезёмы"
                        },
                        new
                        {
                            Id = 174,
                            ClassificationId = 3,
                            NameRu = "Торфяно-криозёмы"
                        },
                        new
                        {
                            Id = 175,
                            ClassificationId = 3,
                            NameRu = "Торфяно-подзолисто-глеевые"
                        },
                        new
                        {
                            Id = 176,
                            ClassificationId = 3,
                            NameRu = "Торфяно-подзолы"
                        },
                        new
                        {
                            Id = 177,
                            ClassificationId = 3,
                            NameRu = "Торфяно-подзолы глеевые"
                        },
                        new
                        {
                            Id = 178,
                            ClassificationId = 3,
                            NameRu = "Торфяные олиготрофные"
                        },
                        new
                        {
                            Id = 179,
                            ClassificationId = 3,
                            NameRu = "Торфяные олиготрофные глеевые"
                        },
                        new
                        {
                            Id = 180,
                            ClassificationId = 3,
                            NameRu = "Торфяные эутрофные"
                        },
                        new
                        {
                            Id = 181,
                            ClassificationId = 3,
                            NameRu = "Торфяные эутрофные глеевые"
                        },
                        new
                        {
                            Id = 182,
                            ClassificationId = 2,
                            NameRu = "Артииндустратный"
                        },
                        new
                        {
                            Id = 183,
                            ClassificationId = 2,
                            NameRu = "Глее-подзолистые"
                        },
                        new
                        {
                            Id = 184,
                            ClassificationId = 2,
                            NameRu = "Глееватые"
                        },
                        new
                        {
                            Id = 185,
                            ClassificationId = 2,
                            NameRu = "Глеевые"
                        },
                        new
                        {
                            Id = 186,
                            ClassificationId = 2,
                            NameRu = "Глинисто-иллювиированные"
                        },
                        new
                        {
                            Id = 187,
                            ClassificationId = 2,
                            NameRu = "Глинофибровые"
                        },
                        new
                        {
                            Id = 188,
                            ClassificationId = 2,
                            NameRu = "Грубо-гумусированные"
                        },
                        new
                        {
                            Id = 189,
                            ClassificationId = 2,
                            NameRu = "Гумусово-слаборазвитый"
                        },
                        new
                        {
                            Id = 190,
                            ClassificationId = 2,
                            NameRu = "Дисперсно-карбонатный"
                        },
                        new
                        {
                            Id = 191,
                            ClassificationId = 2,
                            NameRu = "Железисто-гранулированные (гранузёмы)"
                        },
                        new
                        {
                            Id = 192,
                            ClassificationId = 2,
                            NameRu = "Засоленные"
                        },
                        new
                        {
                            Id = 193,
                            ClassificationId = 2,
                            NameRu = "Иллювиально-гумусовые"
                        },
                        new
                        {
                            Id = 194,
                            ClassificationId = 2,
                            NameRu = "Иллювиально-железистые"
                        },
                        new
                        {
                            Id = 195,
                            ClassificationId = 2,
                            NameRu = "Иллювиально-ожелезненные"
                        },
                        new
                        {
                            Id = 196,
                            ClassificationId = 2,
                            NameRu = "Иллювиально-гумусированные"
                        },
                        new
                        {
                            Id = 197,
                            ClassificationId = 2,
                            NameRu = "Иловато-перегнойные"
                        },
                        new
                        {
                            Id = 198,
                            ClassificationId = 2,
                            NameRu = "Иловато-торфяные"
                        },
                        new
                        {
                            Id = 199,
                            ClassificationId = 2,
                            NameRu = "Квазиглееватые"
                        },
                        new
                        {
                            Id = 200,
                            ClassificationId = 2,
                            NameRu = "Конкреционные"
                        },
                        new
                        {
                            Id = 201,
                            ClassificationId = 2,
                            NameRu = "Контактно-осветленные"
                        },
                        new
                        {
                            Id = 202,
                            ClassificationId = 2,
                            NameRu = "Крио-гомогенные"
                        },
                        new
                        {
                            Id = 203,
                            ClassificationId = 2,
                            NameRu = "Криогенно-ожелезненные"
                        },
                        new
                        {
                            Id = 204,
                            ClassificationId = 2,
                            NameRu = "Криометаморфические"
                        },
                        new
                        {
                            Id = 205,
                            ClassificationId = 2,
                            NameRu = "Криотурбированные"
                        },
                        new
                        {
                            Id = 206,
                            ClassificationId = 2,
                            NameRu = "Мерзлотные"
                        },
                        new
                        {
                            Id = 207,
                            ClassificationId = 2,
                            NameRu = "Миграционно-мицелярный"
                        },
                        new
                        {
                            Id = 208,
                            ClassificationId = 2,
                            NameRu = "Миграционно-сегрегационные"
                        },
                        new
                        {
                            Id = 209,
                            ClassificationId = 2,
                            NameRu = "Минерально-торфяные"
                        },
                        new
                        {
                            Id = 210,
                            ClassificationId = 2,
                            NameRu = "Омергеленные"
                        },
                        new
                        {
                            Id = 211,
                            ClassificationId = 2,
                            NameRu = "Оподзоленные"
                        },
                        new
                        {
                            Id = 212,
                            ClassificationId = 2,
                            NameRu = "Оруденелые"
                        },
                        new
                        {
                            Id = 213,
                            ClassificationId = 2,
                            NameRu = "Осолоделые"
                        },
                        new
                        {
                            Id = 214,
                            ClassificationId = 2,
                            NameRu = "Остаточно-карбонатные"
                        },
                        new
                        {
                            Id = 215,
                            ClassificationId = 2,
                            NameRu = "Остаточно-эутрофные"
                        },
                        new
                        {
                            Id = 216,
                            ClassificationId = 2,
                            NameRu = "Палево-метаморфизованные"
                        },
                        new
                        {
                            Id = 217,
                            ClassificationId = 2,
                            NameRu = "Палево-подзолистые"
                        },
                        new
                        {
                            Id = 218,
                            ClassificationId = 2,
                            NameRu = "Палевые"
                        },
                        new
                        {
                            Id = 219,
                            ClassificationId = 2,
                            NameRu = "Перегнойно-грубогумусовые"
                        },
                        new
                        {
                            Id = 220,
                            ClassificationId = 2,
                            NameRu = "Перегнойно-торфяные"
                        },
                        new
                        {
                            Id = 221,
                            ClassificationId = 2,
                            NameRu = "Перегнойные"
                        },
                        new
                        {
                            Id = 222,
                            ClassificationId = 2,
                            NameRu = "Перегнойные (глеевые)"
                        },
                        new
                        {
                            Id = 223,
                            ClassificationId = 2,
                            NameRu = "Потечно-гумусовые"
                        },
                        new
                        {
                            Id = 224,
                            ClassificationId = 2,
                            NameRu = "Псевдофибровые"
                        },
                        new
                        {
                            Id = 225,
                            ClassificationId = 2,
                            NameRu = "С микропрофилем подзола"
                        },
                        new
                        {
                            Id = 226,
                            ClassificationId = 2,
                            NameRu = "Сегрегационные"
                        },
                        new
                        {
                            Id = 227,
                            ClassificationId = 2,
                            NameRu = "Со вторым гумусовым горизонтом"
                        },
                        new
                        {
                            Id = 228,
                            ClassificationId = 2,
                            NameRu = "Солонцеватые"
                        },
                        new
                        {
                            Id = 229,
                            ClassificationId = 2,
                            NameRu = "Языковатые"
                        },
                        new
                        {
                            Id = 230,
                            ClassificationId = 4,
                            NameEng = "Humid equatorial forests",
                            NameRu = "Влажные экваториальные леса"
                        },
                        new
                        {
                            Id = 231,
                            ClassificationId = 4,
                            NameEng = "Mountains with altitudinal zonations",
                            NameRu = "Горные территории с высотной поясностью"
                        },
                        new
                        {
                            Id = 232,
                            ClassificationId = 4,
                            NameEng = "Subtropical evergreen forests and shrubs",
                            NameRu = "Субтропические вечно-зеленые леса и кустарники"
                        },
                        new
                        {
                            Id = 233,
                            ClassificationId = 4,
                            NameEng = "Typical tundra (subzone)",
                            NameRu = "Типичная тундра (подзона)"
                        },
                        new
                        {
                            Id = 234,
                            ClassificationId = 4,
                            NameEng = "South tundra (subzone)",
                            NameRu = "Южная тундра (подзона)"
                        },
                        new
                        {
                            Id = 235,
                            ClassificationId = 4,
                            NameEng = "Forest Tundra",
                            NameRu = "Лесотундра"
                        },
                        new
                        {
                            Id = 236,
                            ClassificationId = 4,
                            NameEng = "Northern taiga (subzone)",
                            NameRu = "Северная тайга (подзона)"
                        },
                        new
                        {
                            Id = 237,
                            ClassificationId = 4,
                            NameEng = "Middle taiga (subzone)",
                            NameRu = "Средняя тайга (подзона)"
                        },
                        new
                        {
                            Id = 238,
                            ClassificationId = 4,
                            NameEng = "Southern taiga (subzone)",
                            NameRu = "Южная тайга"
                        },
                        new
                        {
                            Id = 239,
                            ClassificationId = 4,
                            NameEng = "Coniferous-deciduous forests",
                            NameRu = "Хвойно-широколиственные леса"
                        },
                        new
                        {
                            Id = 240,
                            ClassificationId = 4,
                            NameEng = "Broad-leaved forests (deciduous forests)",
                            NameRu = "Широколиственные леса"
                        },
                        new
                        {
                            Id = 241,
                            ClassificationId = 4,
                            NameEng = "Continental subboreal forests (hemiboreal)",
                            NameRu = "Подтайга (мелколиственно-светлохвойная или хвойно-широколиственная)"
                        },
                        new
                        {
                            Id = 242,
                            ClassificationId = 4,
                            NameEng = "Forest steppe",
                            NameRu = "Лесостепь"
                        },
                        new
                        {
                            Id = 243,
                            ClassificationId = 4,
                            NameEng = "Steppe (subzones meadow and true steppes)",
                            NameRu = "Степь (подзоны луговых и настоящих степей)"
                        },
                        new
                        {
                            Id = 244,
                            ClassificationId = 4,
                            NameEng = "Dry and deserted steppe",
                            NameRu = "Сухая и опустыненная степь"
                        },
                        new
                        {
                            Id = 245,
                            ClassificationId = 4,
                            NameEng = "Deserts and semi-deserts",
                            NameRu = "Полупустыни и пустыни"
                        },
                        new
                        {
                            Id = 246,
                            ClassificationId = 4,
                            NameEng = "Subtropical savannahs and woodlands",
                            NameRu = "Субтропических саванн и редколесий"
                        },
                        new
                        {
                            Id = 247,
                            ClassificationId = 1,
                            NameRu = "Торфяные почвы"
                        },
                        new
                        {
                            Id = 248,
                            ClassificationId = 1,
                            NameRu = "Турбозёмы"
                        },
                        new
                        {
                            Id = 249,
                            ClassificationId = 1,
                            NameRu = "Хемозёмы"
                        },
                        new
                        {
                            Id = 250,
                            ClassificationId = 1,
                            NameRu = "Торфозёмы"
                        },
                        new
                        {
                            Id = 251,
                            ClassificationId = 1,
                            NameRu = "Текстурно-дифференцированные почвы"
                        },
                        new
                        {
                            Id = 252,
                            ClassificationId = 1,
                            NameRu = "Стратозёмы"
                        },
                        new
                        {
                            Id = 253,
                            ClassificationId = 1,
                            NameRu = "Структурно-метаморфические почвы"
                        },
                        new
                        {
                            Id = 254,
                            ClassificationId = 1,
                            NameRu = "Химически-преобразованные"
                        },
                        new
                        {
                            Id = 255,
                            ClassificationId = 1,
                            NameRu = "Щелочно-глинисто-дифференцированные почвы"
                        },
                        new
                        {
                            Id = 256,
                            ClassificationId = 1,
                            NameRu = "Элювиальные почвы"
                        },
                        new
                        {
                            Id = 257,
                            ClassificationId = 1,
                            NameRu = "Слаборазвитые почвы"
                        },
                        new
                        {
                            Id = 258,
                            ClassificationId = 1,
                            NameRu = "Светлогумусовые аккумулятивно-карбонатные почвы"
                        },
                        new
                        {
                            Id = 259,
                            ClassificationId = 1,
                            NameRu = "Аллювиальные почвы"
                        },
                        new
                        {
                            Id = 260,
                            ClassificationId = 1,
                            NameRu = "Альфегумусовые почвы"
                        },
                        new
                        {
                            Id = 261,
                            ClassificationId = 1,
                            NameRu = "Вулканические почвы"
                        },
                        new
                        {
                            Id = 262,
                            ClassificationId = 1,
                            NameRu = "Аккумулятивно-гумусовые почвы"
                        },
                        new
                        {
                            Id = 263,
                            ClassificationId = 1,
                            NameRu = "Аквазёмы"
                        },
                        new
                        {
                            Id = 264,
                            ClassificationId = 1,
                            NameRu = "Агроабразёмы"
                        },
                        new
                        {
                            Id = 265,
                            ClassificationId = 1,
                            NameRu = "Агрозёмы"
                        },
                        new
                        {
                            Id = 266,
                            ClassificationId = 1,
                            NameRu = "Галоморфные почвы"
                        },
                        new
                        {
                            Id = 267,
                            ClassificationId = 1,
                            NameRu = "Гидрометаморфические почвы"
                        },
                        new
                        {
                            Id = 268,
                            ClassificationId = 1,
                            NameRu = "Литозёмы"
                        },
                        new
                        {
                            Id = 269,
                            ClassificationId = 1,
                            NameRu = "Органо-аккумулятивные почвы"
                        },
                        new
                        {
                            Id = 270,
                            ClassificationId = 1,
                            NameRu = "Палево-метаморфические почвы"
                        },
                        new
                        {
                            Id = 271,
                            ClassificationId = 1,
                            NameRu = "Криометаморфические почвы"
                        },
                        new
                        {
                            Id = 272,
                            ClassificationId = 1,
                            NameRu = "Криогенные почвы (Криозёмы)"
                        },
                        new
                        {
                            Id = 273,
                            ClassificationId = 1,
                            NameRu = "Глеевые почвы"
                        },
                        new
                        {
                            Id = 274,
                            ClassificationId = 1,
                            NameRu = "Железисто-метаморфические почвы"
                        },
                        new
                        {
                            Id = 275,
                            ClassificationId = 1,
                            NameRu = "Абразёмы"
                        });
                });

            modelBuilder.Entity("Photosoil.Core.Models.SoilObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longtitude")
                        .HasColumnType("text");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<int?>("PhotoId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("SoilObjects");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("PublicationSoilObject", b =>
                {
                    b.Property<int>("PublicationsId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilObjectsId")
                        .HasColumnType("integer");

                    b.HasKey("PublicationsId", "SoilObjectsId");

                    b.HasIndex("SoilObjectsId");

                    b.ToTable("PublicationSoilObject");
                });

            modelBuilder.Entity("SoilObjectTerm", b =>
                {
                    b.Property<int>("SoilObjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("TermsId")
                        .HasColumnType("integer");

                    b.HasKey("SoilObjectsId", "TermsId");

                    b.HasIndex("TermsId");

                    b.ToTable("SoilObjectTerm");
                });

            modelBuilder.Entity("AuthorEcoSystem", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.EcoSystem", null)
                        .WithMany()
                        .HasForeignKey("EcoSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorSoilObject", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.SoilObject", null)
                        .WithMany()
                        .HasForeignKey("SoilObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoSystemFile", b =>
                {
                    b.HasOne("Photosoil.Core.Models.EcoSystem", null)
                        .WithMany()
                        .HasForeignKey("EcoSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.File", null)
                        .WithMany()
                        .HasForeignKey("ObjectPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoSystemPublication", b =>
                {
                    b.HasOne("Photosoil.Core.Models.EcoSystem", null)
                        .WithMany()
                        .HasForeignKey("EcoSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoSystemSoilObject", b =>
                {
                    b.HasOne("Photosoil.Core.Models.EcoSystem", null)
                        .WithMany()
                        .HasForeignKey("EcoSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.SoilObject", null)
                        .WithMany()
                        .HasForeignKey("SoilObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileNews", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.News", null)
                        .WithMany()
                        .HasForeignKey("NewsFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileNews1", b =>
                {
                    b.HasOne("Photosoil.Core.Models.News", null)
                        .WithMany()
                        .HasForeignKey("NewsPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.File", null)
                        .WithMany()
                        .HasForeignKey("ObjectPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileSoilObject", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", null)
                        .WithMany()
                        .HasForeignKey("ObjectPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.SoilObject", null)
                        .WithMany()
                        .HasForeignKey("SoilObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Photosoil.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Photosoil.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Photosoil.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsTag", b =>
                {
                    b.HasOne("Photosoil.Core.Models.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.Second.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photosoil.Core.Models.Article", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", "Photo")
                        .WithOne()
                        .HasForeignKey("Photosoil.Core.Models.Article", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Author", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Translation", "DataEng")
                        .WithMany()
                        .HasForeignKey("DataEngId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.Translation", "DataRu")
                        .WithMany()
                        .HasForeignKey("DataRuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.File", "Photo")
                        .WithOne()
                        .HasForeignKey("Photosoil.Core.Models.Author", "PhotoId");

                    b.HasOne("Photosoil.Core.Models.ApplicationUser", "User")
                        .WithMany("Authors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("DataEng");

                    b.Navigation("DataRu");

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photosoil.Core.Models.EcoSystem", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.ApplicationUser", "User")
                        .WithMany("EcoSystems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photosoil.Core.Models.News", b =>
                {
                    b.HasOne("Photosoil.Core.Models.ApplicationUser", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Publication", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Photosoil.Core.Models.ApplicationUser", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.EcoTranslation", b =>
                {
                    b.HasOne("Photosoil.Core.Models.EcoSystem", "EcoSystem")
                        .WithMany("Translations")
                        .HasForeignKey("EcoSystemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EcoSystem");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.NewsTranslation", b =>
                {
                    b.HasOne("Photosoil.Core.Models.News", "News")
                        .WithMany("Translations")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("News");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.PublicationTranslation", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Publication", "Publication")
                        .WithMany("Translations")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.SoilTranslation", b =>
                {
                    b.HasOne("Photosoil.Core.Models.SoilObject", "SoilObject")
                        .WithMany("Translations")
                        .HasForeignKey("SoilId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SoilObject");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.Term", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Second.Classification", "Classification")
                        .WithMany("Terms")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("Photosoil.Core.Models.SoilObject", b =>
                {
                    b.HasOne("Photosoil.Core.Models.File", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.ApplicationUser", "User")
                        .WithMany("SoilObjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PublicationSoilObject", b =>
                {
                    b.HasOne("Photosoil.Core.Models.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.SoilObject", null)
                        .WithMany()
                        .HasForeignKey("SoilObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoilObjectTerm", b =>
                {
                    b.HasOne("Photosoil.Core.Models.SoilObject", null)
                        .WithMany()
                        .HasForeignKey("SoilObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photosoil.Core.Models.Second.Term", null)
                        .WithMany()
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photosoil.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("EcoSystems");

                    b.Navigation("News");

                    b.Navigation("Publications");

                    b.Navigation("SoilObjects");
                });

            modelBuilder.Entity("Photosoil.Core.Models.EcoSystem", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.News", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Publication", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Photosoil.Core.Models.Second.Classification", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Photosoil.Core.Models.SoilObject", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
